name: CI/CD
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test-ml-client:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd machine-learning-client
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
    
    - name: Test with pytest
      run: |
        cd machine-learning-client
        pytest test_client.py --cov=. --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        file: ./machine-learning-client/coverage.xml
        flags: mlclient
        fail_ci_if_error: false

  test-web-app:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd web-app
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
        pip install pytest pytest-flask pytest-cov pymongo tensorflow librosa joblib
    
    - name: Set up testing environment
      run: |
        cd web-app
        # Create necessary environment variables
        echo "TESTING=True" >> .env
        echo "SECRET_KEY=test_key" >> .env
        
        # Make sure Python can find the modules
        touch __init__.py
        
        # Create dummy model files if needed
        mkdir -p models
        touch models/dummy_model.h5
        touch models/dummy_encoder.pkl
        
        # Update environment variables
        echo "MODEL_PATH=models/dummy_model.h5" >> .env
        echo "ENCODER_PATH=models/dummy_encoder.pkl" >> .env
    
    - name: Test with pytest
      run: |
        cd web-app
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        export TESTING=True
        pytest app_test.py test_routes.py test_ml.py -v --cov=. --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v1
      with:
        file: ./web-app/coverage.xml
        flags: webapp
        fail_ci_if_error: false
