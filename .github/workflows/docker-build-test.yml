name: Docker Build and Test
on:
  push:
    branches:
      - main
      - '**' # Run on all branches
    paths:
      - 'web-app/**'
      - 'machine-learning-client/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'web-app/**'
      - 'machine-learning-client/**'
      - 'docker-compose.yml'
      - '.github/workflows/docker-build.yml'

jobs:
  docker-build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Debug environment
        run: |
          pwd
          ls -la
          docker version
          docker info

      - name: Install docker-compose plugin
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64 \
            -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose
          docker-compose version

      - name: Check docker-compose file
        run: |
          if [ ! -f "docker-compose.yml" ]; then
            echo "ERROR: docker-compose.yml not found!"
            ls -la
            exit 1
          fi
          echo "Docker compose file contents:"
          cat docker-compose.yml

      - name: Build services
        run: docker-compose build --no-cache
        
      - name: Start services
        run: docker-compose up -d

      - name: List running containers
        run: |
          docker ps -a
          docker-compose ps

      - name: Check running containers
        run: |
          # Give containers time to fully start
          sleep 30
          docker-compose ps
          # Check if all containers are running properly
          RUNNING_COUNT=$(docker-compose ps -q | wc -l)
          SERVICE_COUNT=$(docker-compose config --services | wc -l)
          echo "Running containers: $RUNNING_COUNT, Expected services: $SERVICE_COUNT"
          if [ "$RUNNING_COUNT" -ne "$SERVICE_COUNT" ]; then
            echo "Not all containers are running!"
            docker-compose logs
            exit 1
          fi
          echo "All containers running successfully."

      - name: Test ML Client container
        run: |
          # List all container names
          echo "Available containers:"
          docker ps --format "{{.Names}}"
          
          # Check if ML client container is healthy
          if ! docker ps --format "{{.Names}}" | grep -q "flappy-ml-client"; then
            echo "ML Client container not found!"
            docker-compose logs
            exit 1
          fi
          
          if [ "$(docker inspect -f '{{.State.Running}}' flappy-ml-client)" != "true" ]; then
            echo "ML Client container is not running properly!"
            docker logs flappy-ml-client
            exit 1
          fi
          echo "ML Client container is healthy."

      - name: Test Web App container
        run: |
          # Check if web app is responding
          echo "Testing web app at http://localhost:5001"
          curl -v --retry 5 --retry-delay 5 http://localhost:5001
          if [ $? -ne 0 ]; then
            echo "Web app is not responding!"
            docker logs flappy-web
            exit 1
          fi
          echo "Web App container is healthy."

      - name: Check MongoDB container
        run: |
          # Get actual MongoDB container name
          MONGO_CONTAINER=$(docker ps --format "{{.Names}}" | grep mongo)
          echo "MongoDB container: $MONGO_CONTAINER"
          
          # Check if MongoDB container is healthy
          if [ -z "$MONGO_CONTAINER" ]; then
            echo "MongoDB container not found!"
            docker-compose logs
            exit 1
          fi
          
          if [ "$(docker inspect -f '{{.State.Running}}' $MONGO_CONTAINER)" != "true" ]; then
            echo "MongoDB container is not running properly!"
            docker logs $MONGO_CONTAINER
            exit 1
          fi
          echo "MongoDB container is healthy."

      - name: Display container logs
        if: always()
        run: docker-compose logs
