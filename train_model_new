#!/usr/bin/env python3
"""
Model Evaluation Script for Voice Command Recognition

Loads a trained CNN model and evaluates it on test data. Provides accuracy metrics,
confusion matrix, and class-wise performance.
"""

import os
import joblib
import logging
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
from tensorflow.keras.models import load_model
from extract_features import load_dataset
from sklearn.preprocessing import LabelEncoder

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger(__name__)

# Constants
MODEL_PATH = "cnn_model.h5"
ENCODER_PATH = "cnn_label_encoder.pkl"


def evaluate_model():
    """Evaluate trained model on the full dataset."""
    logger.info("Loading model and label encoder...")
    model = load_model(MODEL_PATH)
    label_encoder = joblib.load(ENCODER_PATH)

    logger.info("Loading dataset for evaluation...")
    X, y_true = load_dataset()
    y_encoded = label_encoder.transform(y_true)

    logger.info("Running predictions...")
    y_pred_encoded = np.argmax(model.predict(X), axis=1)

    logger.info("Generating classification report...")
    target_names = label_encoder.classes_
    report = classification_report(y_encoded, y_pred_encoded, target_names=target_names)
    print("\nClassification Report:\n")
    print(report)

    logger.info("Generating confusion matrix...")
    cm = confusion_matrix(y_encoded, y_pred_encoded)

    plt.figure(figsize=(10, 8))
    sns.heatmap(cm, annot=True, fmt="d", xticklabels=target_names, yticklabels=target_names, cmap="Blues")
    plt.title("Confusion Matrix")
    plt.xlabel("Predicted Label")
    plt.ylabel("True Label")
    plt.tight_layout()
    plt.savefig("confusion_matrix.png")
    plt.show()

    logger.info("Evaluation complete. Confusion matrix saved as 'confusion_matrix.png'.")


if __name__ == "__main__":
    evaluate_model()
