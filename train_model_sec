#!/usr/bin/env python3
"""
Feature Extraction for Voice Commands

This script extracts log-Mel spectrogram features from WAV audio files and prepares
the dataset for CNN training.
"""

import os
import numpy as np
import librosa
import logging
from glob import glob

# Logging config
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# Constants
AUDIO_DIR = "./audio_data"
SAMPLE_RATE = 16000
N_MELS = 128
SPEC_FRAMES = 44


def extract_features_from_file(filepath):
    """Extracts log-Mel spectrogram from a single audio file."""
    y, sr = librosa.load(filepath, sr=SAMPLE_RATE)
    if len(y) < SAMPLE_RATE:
        y = np.pad(y, (0, SAMPLE_RATE - len(y)))
    else:
        y = y[:SAMPLE_RATE]

    mel_spec = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=N_MELS)
    log_mel = librosa.power_to_db(mel_spec)

    if log_mel.shape[1] < SPEC_FRAMES:
        pad_width = SPEC_FRAMES - log_mel.shape[1]
        log_mel = np.pad(log_mel, ((0, 0), (0, pad_width)), mode="constant")
    else:
        log_mel = log_mel[:, :SPEC_FRAMES]

    return log_mel


def load_dataset():
    """Loads the dataset and returns features and labels as numpy arrays."""
    X, y = [], []
    for label_dir in os.listdir(AUDIO_DIR):
        label_path = os.path.join(AUDIO_DIR, label_dir)
        if not os.path.isdir(label_path):
            continue

        logger.info(f"Processing label: {label_dir}")
        for audio_file in glob(os.path.join(label_path, "*.wav")):
            try:
                features = extract_features_from_file(audio_file)
                X.append(features)
                y.append(label_dir)
            except Exception as e:
                logger.warning(f"Failed to process {audio_file}: {e}")

    X = np.array(X)[..., np.newaxis]  # Add channel dimension
    y = np.array(y)
    return X, y


if __name__ == "__main__":
    logger.info("Running feature extraction standalone...")
    X, y = load_dataset()
    logger.info(f"Extracted dataset with shape: X={X.shape}, y={y.shape}")
